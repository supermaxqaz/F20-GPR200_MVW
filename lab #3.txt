void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;


    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;


    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;


    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}


void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);


    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}


vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    // -> what does the ray look like as color?
    
    return rayDirection;
}


// dummmy function
vec4 add(in int index)
{
        // do stuff
    //
    //
    //
    //
    return vec4(float(index));
}


//float pow64(float x)
//{
//        x *= x; //2
//    x *= x; //4
//    x *= x; //8
//    x *= x; //32
//    x *= x; //64
//}


//float lenSq(in vec2)
//{
//    return dot(x, x)
//}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
     // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;


    // ray
    vec4 rayDirection, rayOrigin;


    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);


    // color
    fragColor = calcColor(rayDirection, rayOrigin);


    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
    
    //Efficieny tips
    float a = fragCoord.x + 2.0;          // 3.0: parallel
    
    float b = a >= 0.0 ? +a : -a;
    
    if (a >= 50.0)
    {
            //do stuff
    }
    else
    {
            //do stuff
    }
    
    vec4 result = vec4(0.0);
    int numSamples = 8;
    int i;
   // for(i = numSamples; i >= 0; --i)
  //  {
  //          result += vec4(float(i));
  //  }
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    
    //EXAMPLES
    //float aSq = A * a; // pow(a, 2.0)
    //float aCu = aSq * a; //a * a * a
    //float a4 = aSq * aSq;
    //a *= a; //square a 
    //a *= a; //original a^4
    //a *= a; //original a^8
    // how do i make it look prettier?
   // a = pow64(a);
    
   // float len2 = lenSq(rayDireciton);
        
        //dot(rayDirection, rayDireciton);
         //vec2 s = reyDirection.xy;
   // vec2 s = rayDireciton.zzx; //sqizzling
    //rayDirection,yzx = vec3(1.0, 2.0, 3.0);
    //rayDirection.yxz = rayDireciton.zxy;
   // vec4 s4 = len2.xxxx;
}